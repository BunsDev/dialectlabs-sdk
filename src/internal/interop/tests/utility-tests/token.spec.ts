import { DialectWalletAdapterEd25519TokenSigner } from "@auth/auth.interface";
import { AuthTokensImpl } from "@auth/internal/token-utils";
import { primaryKeyPair } from "@interop/interop-keypairs";
import { InteroperabilityMessagingConfig } from "@interop/interop-messaging-test-helpers";
import { DialectWalletAdapterWrapper } from "@wallet-adapter/dialect-wallet-adapter-wrapper";
import { NodeDialectWalletAdapter } from "@wallet-adapter/node-dialect-wallet-adapter";
import { Duration } from "luxon";

describe('Auth token tests', () => {
    const wallet = new DialectWalletAdapterWrapper(NodeDialectWalletAdapter.create(primaryKeyPair));
    const signer = new DialectWalletAdapterEd25519TokenSigner(wallet);
    const tokenUtils = new AuthTokensImpl();
    test('Validate dart token', async () => {
        // TODO: enter a token generated in the dart SDK
        const rawToken = "";

        if (rawToken) {
            // when
            const token = tokenUtils.parse(rawToken);
            console.log(token.rawValue);

            // then
            const isValid = tokenUtils.isValid(token);
            expect(isValid).toBeTruthy();
            const parsedToken = tokenUtils.parse(token.rawValue);
            const isParsedTokenValid = tokenUtils.isValid(parsedToken);
            expect(isParsedTokenValid).toBeTruthy();
        } else {
            console.log("Set the agove rawToken var to a token generated by the dart SDK")
        }
    }, InteroperabilityMessagingConfig.timeoutDuration.as("milliseconds"));

    test('Validate ts token', async () => {
        // when
        const token = await tokenUtils.generate(
            signer,
            Duration.fromObject({ seconds: 100 }),
        );
        console.log(token.rawValue);

        // then
        const isValid = tokenUtils.isValid(token);
        expect(isValid).toBeTruthy();
        const parsedToken = tokenUtils.parse(token.rawValue);
        const isParsedTokenValid = tokenUtils.isValid(parsedToken);
        expect(isParsedTokenValid).toBeTruthy();
    }, InteroperabilityMessagingConfig.timeoutDuration.as("milliseconds"));
})